import mongoose from "mongoose";
import dotenv from "dotenv";
import path from "path";

dotenv.config({ path: path.resolve(process.cwd(), ".env.local") });

// Import models properly
import Question from "../src/models/Question";
import QuestionOption from "../src/models/QuestionOption";
import Subject from "../src/models/Subject";
import Program from "../src/models/Program";
import Grade from "../src/models/Grade";
import QuestionCategory from "../src/models/QuestionCategory";
import Exam from "../src/models/Exam";
import ExamBlueprint from "../src/models/ExamBlueprint";
import User from "../src/models/User";
import Role from "../src/models/Role";

async function addEssayQuestionsAndExam() {
  try {
    console.log("๐ ุฌุงุฑู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช...");
    await mongoose.connect(process.env.MONGODB_URI as string);
    console.log("โ ุชู ุงูุงุชุตุงู ุจูุฌุงุญ!");

    // Get reference data (using correct codes)
    console.log("๐ ุฌุงุฑู ุงูุจุญุซ ุนู ุงูุจูุงูุงุช ุงููุฑุฌุนูุฉ...");

    const arabicSubject = await Subject.findOne({ code: "AR" });
    const mathSubject = await Subject.findOne({ code: "MATH" });
    const scienceSubject = await Subject.findOne({ code: "SCI" });
    const arabicProgram = await Program.findOne({ code: "ARABIC" });
    const grade3 = await Grade.findOne({ code: "G3" });
    const essayCategory = await QuestionCategory.findOne({ code: "ESSAY" });
    const mcqCategory = await QuestionCategory.findOne({ code: "MCQ" });

    if (
      !arabicSubject ||
      !mathSubject ||
      !scienceSubject ||
      !arabicProgram ||
      !grade3 ||
      !essayCategory ||
      !mcqCategory
    ) {
      throw new Error("ุงูุจูุงูุงุช ุงููุฑุฌุนูุฉ ุบูุฑ ููุฌูุฏุฉ");
    }

    console.log("โ ุชู ุงูุนุซูุฑ ุนูู ุฌููุน ุงูุจูุงูุงุช ุงููุฑุฌุนูุฉ!");

    console.log("\n๐ ุฌุงุฑู ุฅุถุงูุฉ ุฃุณุฆูุฉ ููุงููุฉ...");

    // Add Essay Questions for Arabic
    const essayQuestions = [
      {
        questionText:
          "ุงูุชุจ ููุถูุนุงู ุนู ูุตู ุงูุฑุจูุน ูุฌูุงููุ ูุณุชุฎุฏูุงู ุฌููุงู ูุงุถุญุฉ ููููุงุช ูุนุจุฑุฉ (ูุง ููู ุนู 5 ุฃุณุทุฑ)",
        questionType: "essay",
        subjectId: arabicSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: essayCategory._id,
        points: 10,
        isApproved: true,
      },
      {
        questionText:
          'ุงูุฑุฃ ุงููุตุฉ ุงููุตูุฑุฉ ุงูุชุงููุฉ ุซู ุงูุชุจ ููุฎุตุงู ููุง: "ูุงู ููุงู ุทูู ุตุบูุฑ ูุญุจ ูุณุงุนุฏุฉ ุงููุงุณุ ูู ููู ูู ุงูุฃูุงู ุณุงุนุฏ ุฑุฌูุงู ุนุฌูุฒุงู ูู ุญูู ุฃุบุฑุงุถูุ ูุดูุฑู ุงูุฑุฌู ูุฏุนุง ูู ุจุงูุชูููู"',
        questionType: "essay",
        subjectId: arabicSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: essayCategory._id,
        points: 8,
        isApproved: true,
      },
      {
        questionText:
          "ูุง ุฑุฃูู ูู ุฃูููุฉ ุงููุฑุงุกุฉุ ุงุฐูุฑ ุซูุงุซุฉ ุฃุณุจุงุจ ุชุฌุนู ุงููุฑุงุกุฉ ูููุฉ",
        questionType: "essay",
        subjectId: arabicSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: essayCategory._id,
        points: 6,
        isApproved: true,
      },
      {
        questionText: "ุงูุชุจ ุฑุณุงูุฉ ูุตูุฑุฉ ุฅูู ุตุฏููู ุชุฏุนูู ูููุง ูุฒูุงุฑุชู ูู ุงูููุฒู",
        questionType: "essay",
        subjectId: arabicSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: essayCategory._id,
        points: 7,
        isApproved: true,
      },
      {
        questionText:
          "ุญู ุงููุณุฃูุฉ ุงูุชุงููุฉ ูุงุดุฑุญ ุฎุทูุงุช ุงูุญู: ุฅุฐุง ูุงู ูุนู 50 ุฑูุงู ูุงุดุชุฑูุช 3 ูุชุจ ูู ูุงุญุฏ ุจู 12 ุฑูุงูุ ูู ูุชุจูู ูุนูุ",
        questionType: "essay",
        subjectId: mathSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: essayCategory._id,
        points: 5,
        isApproved: true,
      },
      {
        questionText: "ุงุดุฑุญ ุจูููุงุชู ุงูุฎุงุตุฉ ูุง ูู ุฏูุฑุฉ ุงููุงุก ูู ุงูุทุจูุนุฉ",
        questionType: "essay",
        subjectId: scienceSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: essayCategory._id,
        points: 8,
        isApproved: true,
      },
    ];

    const createdEssayQuestions = await Question.insertMany(essayQuestions);
    console.log(`โ ุชู ุฅุถุงูุฉ ${createdEssayQuestions.length} ุณุคุงู ููุงูู`);

    // Add more MCQ questions
    console.log("\n๐ ุฌุงุฑู ุฅุถุงูุฉ ุฃุณุฆูุฉ ุงุฎุชูุงุฑูุฉ ุฅุถุงููุฉ...");

    const mcqQuestions = [
      {
        questionText: 'ูุง ูู ุนูุณ ูููุฉ "ูุจูุฑ"ุ',
        questionType: "mcq",
        subjectId: arabicSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: mcqCategory._id,
        points: 2,
        isApproved: true,
      },
      {
        questionText: "ูู ุนุฏุฏ ุฃุญุฑู ุงููุฌุงุก ุงูุนุฑุจูุฉุ",
        questionType: "mcq",
        subjectId: arabicSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: mcqCategory._id,
        points: 2,
        isApproved: true,
      },
      {
        questionText: "ูุง ูุงุชุฌ 7 + 8ุ",
        questionType: "mcq",
        subjectId: mathSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: mcqCategory._id,
        points: 2,
        isApproved: true,
      },
      {
        questionText: "ูุง ูู ุงููููุจ ุงูุฃูุฑุจ ููุดูุณุ",
        questionType: "mcq",
        subjectId: scienceSubject._id,
        programId: arabicProgram._id,
        gradeId: grade3._id,
        categoryId: mcqCategory._id,
        points: 2,
        isApproved: true,
      },
    ];

    const createdMcqQuestions = await Question.insertMany(mcqQuestions);
    console.log(`โ ุชู ุฅุถุงูุฉ ${createdMcqQuestions.length} ุณุคุงู ุงุฎุชูุงุฑู ุฌุฏูุฏ`);

    // Add options for MCQ questions
    const mcqOptions = [
      // Q1 options
      {
        questionId: createdMcqQuestions[0]._id,
        optionText: "ุตุบูุฑ",
        isCorrect: true,
        optionOrder: 1,
      },
      {
        questionId: createdMcqQuestions[0]._id,
        optionText: "ุนุธูู",
        isCorrect: false,
        optionOrder: 2,
      },
      {
        questionId: createdMcqQuestions[0]._id,
        optionText: "ุถุฎู",
        isCorrect: false,
        optionOrder: 3,
      },
      {
        questionId: createdMcqQuestions[0]._id,
        optionText: "ูุซูุฑ",
        isCorrect: false,
        optionOrder: 4,
      },

      // Q2 options
      {
        questionId: createdMcqQuestions[1]._id,
        optionText: "26",
        isCorrect: false,
        optionOrder: 1,
      },
      {
        questionId: createdMcqQuestions[1]._id,
        optionText: "28",
        isCorrect: true,
        optionOrder: 2,
      },
      {
        questionId: createdMcqQuestions[1]._id,
        optionText: "30",
        isCorrect: false,
        optionOrder: 3,
      },
      {
        questionId: createdMcqQuestions[1]._id,
        optionText: "32",
        isCorrect: false,
        optionOrder: 4,
      },

      // Q3 options
      {
        questionId: createdMcqQuestions[2]._id,
        optionText: "13",
        isCorrect: false,
        optionOrder: 1,
      },
      {
        questionId: createdMcqQuestions[2]._id,
        optionText: "14",
        isCorrect: false,
        optionOrder: 2,
      },
      {
        questionId: createdMcqQuestions[2]._id,
        optionText: "15",
        isCorrect: true,
        optionOrder: 3,
      },
      {
        questionId: createdMcqQuestions[2]._id,
        optionText: "16",
        isCorrect: false,
        optionOrder: 4,
      },

      // Q4 options
      {
        questionId: createdMcqQuestions[3]._id,
        optionText: "ุนุทุงุฑุฏ",
        isCorrect: true,
        optionOrder: 1,
      },
      {
        questionId: createdMcqQuestions[3]._id,
        optionText: "ุงูุฒูุฑุฉ",
        isCorrect: false,
        optionOrder: 2,
      },
      {
        questionId: createdMcqQuestions[3]._id,
        optionText: "ุงูุฃุฑุถ",
        isCorrect: false,
        optionOrder: 3,
      },
      {
        questionId: createdMcqQuestions[3]._id,
        optionText: "ุงููุฑูุฎ",
        isCorrect: false,
        optionOrder: 4,
      },
    ];

    await QuestionOption.insertMany(mcqOptions);
    console.log("โ ุชู ุฅุถุงูุฉ ุฎูุงุฑุงุช ุงูุฃุณุฆูุฉ");

    // Create a comprehensive exam for Grade 3
    console.log("\n๐ ุฌุงุฑู ุฅูุดุงุก ุงุฎุชุจุงุฑ ุดุงูู...");

    // Get all G3 questions
    const allG3Questions = await Question.find({
      gradeId: grade3._id,
      isApproved: true,
    });

    console.log(`๐ ูุฌุฏ ${allG3Questions.length} ุณุคุงู ููุตู ุงูุซุงูุซ`);

    // Select questions for the exam (mix of MCQ and Essay)
    const mcqQuestionsForExam = allG3Questions
      .filter((q) => q.questionType === "mcq")
      .slice(0, 10);
    const essayQuestionsForExam = allG3Questions
      .filter((q) => q.questionType === "essay")
      .slice(0, 3);
    const selectedQuestions = [
      ...mcqQuestionsForExam,
      ...essayQuestionsForExam,
    ];

    if (selectedQuestions.length === 0) {
      throw new Error("ูุง ุชูุฌุฏ ุฃุณุฆูุฉ ูุฅูุดุงุก ุงูุงุฎุชุจุงุฑ");
    }

    const totalPoints = selectedQuestions.reduce(
      (sum, q) => sum + (q.points || 1),
      0,
    );

    const exam = await Exam.create({
      name: "ุงุฎุชุจุงุฑ ุดุงูู ููุตู ุงูุซุงูุซ - ูููุฐุฌ ุชุฌุฑูุจู",
      subjectId: arabicSubject._id, // ุงุฎุชุจุงุฑ ุดุงูู ููู ูุญุชุงุฌ subject ูุงุญุฏ
      gradeId: grade3._id,
      programId: arabicProgram._id,
      isActive: true,
    });

    console.log(`โ ุชู ุฅูุดุงุก ุงุฎุชุจุงุฑ: ${exam.name}`);
    console.log(`   - ุงูุตู: ุงูุซุงูุซ`);
    console.log(`   - ุงูุจุฑูุงูุฌ: ุนุฑุจู`);

    // Create exam blueprint (questions in exam)
    const blueprints = selectedQuestions.map((q, index) => ({
      examId: exam._id,
      questionId: q._id,
      questionOrder: index + 1,
      pointsOverride: q.points,
    }));

    await ExamBlueprint.insertMany(blueprints);
    console.log(`โ ุชู ุฅุถุงูุฉ ${blueprints.length} ุณุคุงู ููุงุฎุชุจุงุฑ`);
    console.log(`   - ุฃุณุฆูุฉ ุงุฎุชูุงุฑูุฉ: ${mcqQuestionsForExam.length}`);
    console.log(`   - ุฃุณุฆูุฉ ููุงููุฉ: ${essayQuestionsForExam.length}`);

    console.log("\nโ ุชู ุฅูุดุงุก ุงูุจูุงูุงุช ุจูุฌุงุญ!");
    console.log("\n" + "=".repeat(60));

    await mongoose.connection.close();
  } catch (error) {
    console.error("โ ุฎุทุฃ:", error);
    process.exit(1);
  }
}

addEssayQuestionsAndExam();
